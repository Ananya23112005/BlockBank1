<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tokenization Engine</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: linear-gradient(135deg, #ffd700, #ffeb3b);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .header {
            background: linear-gradient(135deg, #2196f3, #4caf50);
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .main-content {
            padding: 30px;
        }
        
        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }
        
        .feature-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-left: 5px solid;
        }
        
        .feature-card.asset { border-left-color: #4caf50; }
        .feature-card.fractional { border-left-color: #2196f3; }
        .feature-card.loyalty { border-left-color: #ffc107; }
        .feature-card.stablecoin { border-left-color: #00bcd4; }
        
        .feature-card h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }
        
        .form-group input, .form-group select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus, .form-group select:focus {
            outline: none;
            border-color: #4caf50;
        }
        
        .btn {
            background: linear-gradient(135deg, #4caf50, #2196f3);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: transform 0.2s;
            width: 100%;
            margin-top: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .dashboard {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 25px;
            margin-top: 30px;
        }
        
        .dashboard h2 {
            color: #333;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            color: #2196f3;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }
        
        .transaction-log {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            max-height: 300px;
            overflow-y: auto;
        }
        
        .transaction-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
            font-size: 0.9rem;
        }
        
        .transaction-item:last-child {
            border-bottom: none;
        }
        
        .success { color: #4caf50; }
        .warning { color: #ff9800; }
        .info { color: #2196f3; }
        
        .data-tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 2px solid #e0e0e0;
        }
        
        .tab-btn {
            background: none;
            border: none;
            padding: 12px 20px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            color: #666;
            border-bottom: 2px solid transparent;
            transition: all 0.3s;
        }
        
        .tab-btn.active {
            color: #2196f3;
            border-bottom-color: #2196f3;
        }
        
        .tab-btn:hover {
            color: #2196f3;
            background: rgba(33, 150, 243, 0.1);
        }
        
        .data-content {
            min-height: 300px;
        }
        
        .data-tab {
            display: none;
        }
        
        .data-tab.active {
            display: block;
        }
        
        .data-item {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            border-left: 4px solid #4caf50;
        }
        
        .data-item h5 {
            color: #333;
            margin-bottom: 8px;
            font-size: 1.1rem;
        }
        
        .data-item p {
            color: #666;
            margin: 2px 0;
            font-size: 0.9rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîó Tokenization Engine</h1>
            <p>Blockchain-powered asset tokenization and fractional ownership platform</p>
        </div>
        
        <div class="main-content">
            <div class="features-grid">
                <!-- Asset Tokenization -->
                <div class="feature-card asset">
                    <h3>üè¢ Asset Tokenization</h3>
                    <div class="form-group">
                        <label>Asset Type</label>
                        <select id="assetType">
                            <option value="real-estate">Real Estate</option>
                            <option value="commodities">Commodities</option>
                            <option value="securities">Securities</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Asset Value ($)</label>
                        <input type="number" id="assetValue" placeholder="1000000">
                    </div>
                    <div class="form-group">
                        <label>Token Symbol</label>
                        <input type="text" id="tokenSymbol" placeholder="PROP001">
                    </div>
                    <button class="btn" onclick="tokenizeAsset()">Tokenize Asset</button>
                </div>
                
                <!-- Fractional Ownership -->
                <div class="feature-card fractional">
                    <h3>üìä Fractional Ownership</h3>
                    <div class="form-group">
                        <label>Total Shares</label>
                        <input type="number" id="totalShares" placeholder="10000">
                    </div>
                    <div class="form-group">
                        <label>Share Price ($)</label>
                        <input type="number" id="sharePrice" placeholder="100">
                    </div>
                    <div class="form-group">
                        <label>Purchase Shares</label>
                        <input type="number" id="purchaseShares" placeholder="10">
                    </div>
                    <button class="btn" onclick="purchaseShares()">Purchase Shares</button>
                </div>
                
                <!-- Loyalty Rewards -->
                <div class="feature-card loyalty">
                    <h3>üéÅ Loyalty Rewards</h3>
                    <div class="form-group">
                        <label>Customer ID</label>
                        <input type="text" id="customerId" placeholder="CUST001">
                    </div>
                    <div class="form-group">
                        <label>Transaction Amount ($)</label>
                        <input type="number" id="transactionAmount" placeholder="500">
                    </div>
                    <div class="form-group">
                        <label>Reward Rate (%)</label>
                        <input type="number" id="rewardRate" value="2" placeholder="2">
                    </div>
                    <button class="btn" onclick="issueRewards()">Issue Rewards</button>
                </div>
                
                <!-- Stablecoin Integration -->
                <div class="feature-card stablecoin">
                    <h3>üí∞ Stablecoin Transactions</h3>
                    <div class="form-group">
                        <label>From Address</label>
                        <input type="text" id="fromAddress" placeholder="0x123...abc">
                    </div>
                    <div class="form-group">
                        <label>To Address</label>
                        <input type="text" id="toAddress" placeholder="0x456...def">
                    </div>
                    <div class="form-group">
                        <label>Amount (USDC)</label>
                        <input type="number" id="stablecoinAmount" placeholder="1000">
                    </div>
                    <button class="btn" onclick="transferStablecoin()">Transfer USDC</button>
                </div>
            </div>
            
            <!-- Dashboard -->
            <div class="dashboard">
                <h2>üìà Platform Dashboard</h2>
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value" id="totalAssets">0</div>
                        <div class="stat-label">Tokenized Assets</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalValue">$0</div>
                        <div class="stat-label">Total Asset Value</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalShares">0</div>
                        <div class="stat-label">Shares Issued</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value" id="totalRewards">0</div>
                        <div class="stat-label">Rewards Issued</div>
                    </div>
                </div>
                
                <div class="transaction-log">
                    <h3>Transaction Log</h3>
                    <div id="transactionLog">
                        <div class="transaction-item info">System initialized - Ready for tokenization</div>
                    </div>
                </div>
            </div>
            
            <!-- Data Viewer Section -->
            <div class="dashboard">
                <h2>üìä Stored Data Viewer</h2>
                <div class="data-tabs">
                    <button class="tab-btn active" onclick="showDataTab('assets')">Assets</button>
                    <button class="tab-btn" onclick="showDataTab('shares')">Shares</button>
                    <button class="tab-btn" onclick="showDataTab('rewards')">Rewards</button>
                    <button class="tab-btn" onclick="showDataTab('stablecoin')">Stablecoin Txns</button>
                </div>
                
                <div class="data-content">
                    <div id="assets-data" class="data-tab active">
                        <h4>Tokenized Assets</h4>
                        <div id="assetsList">No assets tokenized yet</div>
                    </div>
                    
                    <div id="shares-data" class="data-tab">
                        <h4>Share Purchases</h4>
                        <div id="sharesList">No shares purchased yet</div>
                    </div>
                    
                    <div id="rewards-data" class="data-tab">
                        <h4>Loyalty Rewards</h4>
                        <div id="rewardsList">No rewards issued yet</div>
                    </div>
                    
                    <div id="stablecoin-data" class="data-tab">
                        <h4>Stablecoin Transactions</h4>
                        <div id="stablecoinList">No stablecoin transactions yet</div>
                    </div>
                </div>
                
                <div style="margin-top: 20px; text-align: center;">
                    <button class="btn" onclick="exportData()" style="width: auto; margin-right: 10px;">üì• Export All Data</button>
                    <button class="btn" onclick="clearAllData()" style="width: auto; background: linear-gradient(135deg, #f44336, #d32f2f);">üóëÔ∏è Clear All Data</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Storage object to persist data
        let storage = {
            assets: [],
            shares: [],
            rewards: [],
            stablecoinTxns: [],
            transactions: [],
            stats: {
                totalAssets: 0,
                totalValue: 0,
                totalShares: 0,
                totalRewards: 0
            }
        };

        function addTransaction(message, type = 'info') {
            const log = document.getElementById('transactionLog');
            const item = document.createElement('div');
            item.className = `transaction-item ${type}`;
            item.textContent = `${new Date().toLocaleTimeString()} - ${message}`;
            log.appendChild(item);
            log.scrollTop = log.scrollHeight;
            
            storage.transactions.push({
                timestamp: new Date(),
                message: message,
                type: type
            });
        }

        function updateStats() {
            document.getElementById('totalAssets').textContent = storage.stats.totalAssets;
            document.getElementById('totalValue').textContent = `$${storage.stats.totalValue.toLocaleString()}`;
            document.getElementById('totalShares').textContent = storage.stats.totalShares.toLocaleString();
            document.getElementById('totalRewards').textContent = storage.stats.totalRewards.toLocaleString();
        }

        function tokenizeAsset() {
            const assetType = document.getElementById('assetType').value;
            const assetValue = parseFloat(document.getElementById('assetValue').value);
            const tokenSymbol = document.getElementById('tokenSymbol').value;

            if (!assetValue || !tokenSymbol) {
                addTransaction('Asset tokenization failed - Missing required fields', 'warning');
                return;
            }

            const asset = {
                id: Date.now(),
                type: assetType,
                value: assetValue,
                symbol: tokenSymbol,
                created: new Date()
            };

            storage.assets.push(asset);
            storage.stats.totalAssets++;
            storage.stats.totalValue += assetValue;

            addTransaction(`Asset tokenized: ${tokenSymbol} (${assetType}) - ${assetValue.toLocaleString()}`, 'success');
            updateStats();
            updateDataViews();

            // Clear form
            document.getElementById('assetValue').value = '';
            document.getElementById('tokenSymbol').value = '';
        }

        function purchaseShares() {
            const totalShares = parseInt(document.getElementById('totalShares').value);
            const sharePrice = parseFloat(document.getElementById('sharePrice').value);
            const purchaseShares = parseInt(document.getElementById('purchaseShares').value);

            if (!totalShares || !sharePrice || !purchaseShares) {
                addTransaction('Share purchase failed - Missing required fields', 'warning');
                return;
            }

            const totalCost = sharePrice * purchaseShares;
            const share = {
                id: Date.now(),
                totalShares: totalShares,
                sharePrice: sharePrice,
                purchased: purchaseShares,
                totalCost: totalCost,
                created: new Date()
            };

            storage.shares.push(share);
            storage.stats.totalShares += purchaseShares;

            addTransaction(`Purchased ${purchaseShares} shares at ${sharePrice} each - Total: ${totalCost.toLocaleString()}`, 'success');
            updateStats();
            updateDataViews();

            // Clear form
            document.getElementById('totalShares').value = '';
            document.getElementById('sharePrice').value = '';
            document.getElementById('purchaseShares').value = '';
        }

        function issueRewards() {
            const customerId = document.getElementById('customerId').value;
            const transactionAmount = parseFloat(document.getElementById('transactionAmount').value);
            const rewardRate = parseFloat(document.getElementById('rewardRate').value);

            if (!customerId || !transactionAmount || !rewardRate) {
                addTransaction('Reward issuance failed - Missing required fields', 'warning');
                return;
            }

            const rewardTokens = Math.floor(transactionAmount * (rewardRate / 100));
            const reward = {
                id: Date.now(),
                customerId: customerId,
                transactionAmount: transactionAmount,
                rewardRate: rewardRate,
                rewardTokens: rewardTokens,
                created: new Date()
            };

            storage.rewards.push(reward);
            storage.stats.totalRewards += rewardTokens;

            addTransaction(`Issued ${rewardTokens} reward tokens to ${customerId} (${rewardRate}% of ${transactionAmount})`, 'success');
            updateStats();
            updateDataViews();

            // Clear form
            document.getElementById('customerId').value = '';
            document.getElementById('transactionAmount').value = '';
        }

        function transferStablecoin() {
            const fromAddress = document.getElementById('fromAddress').value;
            const toAddress = document.getElementById('toAddress').value;
            const amount = parseFloat(document.getElementById('stablecoinAmount').value);

            if (!fromAddress || !toAddress || !amount) {
                addTransaction('Stablecoin transfer failed - Missing required fields', 'warning');
                return;
            }

            const transaction = {
                id: Date.now(),
                from: fromAddress,
                to: toAddress,
                amount: amount,
                currency: 'USDC',
                created: new Date()
            };

            storage.stablecoinTxns.push(transaction);

            addTransaction(`Transferred ${amount} USDC from ${fromAddress.slice(0, 8)}... to ${toAddress.slice(0, 8)}...`, 'success');
            updateDataViews();

            // Clear form
            document.getElementById('fromAddress').value = '';
            document.getElementById('toAddress').value = '';
            document.getElementById('stablecoinAmount').value = '';
        }

        // Initialize dashboard
        updateStats();

        function showDataTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.data-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName + '-data').classList.add('active');
            event.target.classList.add('active');
        }

        function updateDataViews() {
            updateAssetsList();
            updateSharesList();
            updateRewardsList();
            updateStablecoinList();
        }

        function updateAssetsList() {
            const container = document.getElementById('assetsList');
            if (storage.assets.length === 0) {
                container.innerHTML = 'No assets tokenized yet';
                return;
            }
            
            container.innerHTML = storage.assets.map(asset => `
                <div class="data-item">
                    <h5>${asset.symbol} - ${asset.type}</h5>
                    <p><strong>Value:</strong> ${asset.value.toLocaleString()}</p>
                    <p><strong>Created:</strong> ${asset.created.toLocaleString()}</p>
                    <p><strong>ID:</strong> ${asset.id}</p>
                </div>
            `).join('');
        }

        function updateSharesList() {
            const container = document.getElementById('sharesList');
            if (storage.shares.length === 0) {
                container.innerHTML = 'No shares purchased yet';
                return;
            }
            
            container.innerHTML = storage.shares.map(share => `
                <div class="data-item">
                    <h5>Share Purchase #${share.id}</h5>
                    <p><strong>Shares Purchased:</strong> ${share.purchased.toLocaleString()}</p>
                    <p><strong>Price per Share:</strong> ${share.sharePrice}</p>
                    <p><strong>Total Cost:</strong> ${share.totalCost.toLocaleString()}</p>
                    <p><strong>Total Shares Available:</strong> ${share.totalShares.toLocaleString()}</p>
                    <p><strong>Purchase Date:</strong> ${share.created.toLocaleString()}</p>
                </div>
            `).join('');
        }

        function updateRewardsList() {
            const container = document.getElementById('rewardsList');
            if (storage.rewards.length === 0) {
                container.innerHTML = 'No rewards issued yet';
                return;
            }
            
            container.innerHTML = storage.rewards.map(reward => `
                <div class="data-item">
                    <h5>Rewards for ${reward.customerId}</h5>
                    <p><strong>Transaction Amount:</strong> ${reward.transactionAmount.toLocaleString()}</p>
                    <p><strong>Reward Rate:</strong> ${reward.rewardRate}%</p>
                    <p><strong>Tokens Issued:</strong> ${reward.rewardTokens}</p>
                    <p><strong>Issue Date:</strong> ${reward.created.toLocaleString()}</p>
                </div>
            `).join('');
        }

        function updateStablecoinList() {
            const container = document.getElementById('stablecoinList');
            if (storage.stablecoinTxns.length === 0) {
                container.innerHTML = 'No stablecoin transactions yet';
                return;
            }
            
            container.innerHTML = storage.stablecoinTxns.map(txn => `
                <div class="data-item">
                    <h5>USDC Transfer</h5>
                    <p><strong>Amount:</strong> ${txn.amount} ${txn.currency}</p>
                    <p><strong>From:</strong> ${txn.from}</p>
                    <p><strong>To:</strong> ${txn.to}</p>
                    <p><strong>Transaction Date:</strong> ${txn.created.toLocaleString()}</p>
                    <p><strong>Transaction ID:</strong> ${txn.id}</p>
                </div>
            `).join('');
        }

        function exportData() {
            const dataToExport = {
                timestamp: new Date().toISOString(),
                stats: storage.stats,
                assets: storage.assets,
                shares: storage.shares,
                rewards: storage.rewards,
                stablecoinTransactions: storage.stablecoinTxns,
                transactionLog: storage.transactions
            };
            
            const dataStr = JSON.stringify(dataToExport, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `tokenization_data_${new Date().toISOString().split('T')[0]}.json`;
            link.click();
            
            addTransaction('Data exported successfully', 'success');
        }

        function clearAllData() {
            if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {
                storage = {
                    assets: [],
                    shares: [],
                    rewards: [],
                    stablecoinTxns: [],
                    transactions: [],
                    stats: {
                        totalAssets: 0,
                        totalValue: 0,
                        totalShares: 0,
                        totalRewards: 0
                    }
                };
                
                updateStats();
                updateDataViews();
                document.getElementById('transactionLog').innerHTML = '<div class="transaction-item info">System reset - All data cleared</div>';
                addTransaction('All data cleared successfully', 'warning');
            }
        }
    </script>
</body>
</html>